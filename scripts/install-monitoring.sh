#!/bin/bash

# üìä Script d'installation du stack de monitoring pour le syst√®me de d√©ploiement

set -e  # Exit on any error

echo "üöÄ Installation du Stack de Monitoring Deployment System"
echo "=========================================================="

# V√©rification des pr√©requis
echo "üîç V√©rification des pr√©requis..."

if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n'est pas install√©"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose n'est pas install√©"
    exit 1
fi

echo "‚úÖ Docker et Docker Compose sont install√©s"

# V√©rification de la connexion aux services
echo "üîç V√©rification de la connectivit√© aux services..."

SERVICES_TO_CHECK=(
    "51.159.99.160:3004:Deployment API"
    "51.159.99.160:3005:Port Manager"
    "51.159.99.160:3001:Tunnel Manager"
)

for service in "${SERVICES_TO_CHECK[@]}"; do
    IFS=':' read -r ip port name <<< "$service"
    if timeout 5 bash -c "</dev/tcp/$ip/$port" &>/dev/null; then
        echo "‚úÖ $name ($ip:$port) accessible"
    else
        echo "‚ö†Ô∏è $name ($ip:$port) non accessible - monitoring limit√©"
    fi
done

# Cr√©ation des r√©pertoires n√©cessaires
echo "üìÅ Cr√©ation des r√©pertoires de donn√©es..."
mkdir -p data/{prometheus,grafana,loki,alertmanager}
sudo chown -R 472:472 data/grafana  # UID Grafana
sudo chown -R 65534:65534 data/prometheus data/alertmanager  # UID nobody

# Configuration de l'environnement
echo "‚öôÔ∏è Configuration de l'environnement..."
if [ ! -f .env ]; then
    cp .env.example .env
    echo "üìù Fichier .env cr√©√©. Vous pouvez le personnaliser selon vos besoins."
else
    echo "‚úÖ Fichier .env existant conserv√©"
fi

# Build des images personnalis√©es
echo "üèóÔ∏è Build de l'image Deployment Metrics Exporter..."
docker build -f Dockerfile.metrics-exporter -t deployment-metrics-exporter:latest .

# V√©rification de l'espace disque
echo "üíæ V√©rification de l'espace disque disponible..."
AVAILABLE_SPACE=$(df / | tail -1 | awk '{print $4}')
REQUIRED_SPACE=2097152  # 2GB en KB

if [ "$AVAILABLE_SPACE" -lt "$REQUIRED_SPACE" ]; then
    echo "‚ö†Ô∏è Attention: Espace disque faible (< 2GB). Le monitoring peut √™tre impact√©."
else
    echo "‚úÖ Espace disque suffisant"
fi

# D√©marrage des services
echo "üöÄ D√©marrage du stack de monitoring..."
docker-compose up -d

# Attendre que les services soient pr√™ts
echo "‚è≥ Attente du d√©marrage des services (60 secondes)..."
sleep 60

# V√©rification du d√©marrage
echo "üîç V√©rification du statut des services..."
MONITORING_SERVICES=(
    "localhost:3000:Grafana"
    "localhost:9090:Prometheus" 
    "localhost:9093:Alertmanager"
    "localhost:9091:Deployment Metrics Exporter"
)

ALL_SERVICES_OK=true

for service in "${MONITORING_SERVICES[@]}"; do
    IFS=':' read -r host port name <<< "$service"
    if curl -f -s -o /dev/null --connect-timeout 10 "http://$host:$port"; then
        echo "‚úÖ $name accessible sur http://$host:$port"
    else
        echo "‚ùå $name non accessible sur http://$host:$port"
        ALL_SERVICES_OK=false
    fi
done

# Configuration initiale Grafana
echo "‚öôÔ∏è Configuration initiale de Grafana..."
sleep 10  # Laisser un peu plus de temps √† Grafana

# V√©rifier si Grafana est accessible
if curl -f -s -o /dev/null "http://localhost:3000"; then
    echo "‚úÖ Grafana accessible"
    echo "üîë Identifiants par d√©faut: admin / monitoring2024!"
    echo "üåê Interface: http://localhost:3000"
else
    echo "‚ö†Ô∏è Grafana non accessible - v√©rifiez les logs: docker-compose logs grafana"
fi

# R√©sum√© de l'installation
echo ""
echo "üéâ Installation termin√©e!"
echo "======================="
echo ""
echo "üìä Services de monitoring disponibles:"
echo "  ‚Ä¢ Grafana (Dashboards):        http://localhost:3000"
echo "  ‚Ä¢ Prometheus (M√©triques):      http://localhost:9090"  
echo "  ‚Ä¢ Alertmanager (Alertes):      http://localhost:9093"
echo "  ‚Ä¢ Metrics Exporter:            http://localhost:9091"
echo ""
echo "üîë Identifiants Grafana:"
echo "  ‚Ä¢ Utilisateur: admin"
echo "  ‚Ä¢ Mot de passe: monitoring2024!"
echo ""
echo "üåê Si configur√© avec Cloudflare Tunnels:"
echo "  ‚Ä¢ Grafana:      https://grafana.silverhawk77.click"
echo "  ‚Ä¢ Prometheus:   https://prometheus.silverhawk77.click"
echo "  ‚Ä¢ Alertmanager: https://alerts.silverhawk77.click"
echo ""
echo "üìã Commandes utiles:"
echo "  ‚Ä¢ Voir les logs:     docker-compose logs -f"
echo "  ‚Ä¢ Arr√™ter:          docker-compose down"
echo "  ‚Ä¢ Red√©marrer:       docker-compose restart"
echo "  ‚Ä¢ Mise √† jour:      docker-compose pull && docker-compose up -d"
echo ""

if [ "$ALL_SERVICES_OK" = false ]; then
    echo "‚ö†Ô∏è Certains services ne sont pas accessibles."
    echo "   V√©rifiez les logs avec: docker-compose logs [nom-service]"
    echo "   Services disponibles: grafana, prometheus, alertmanager, loki, node-exporter"
    exit 1
else
    echo "‚úÖ Tous les services de monitoring sont op√©rationnels!"
    echo ""
    echo "üéØ √âtapes suivantes recommand√©es:"
    echo "  1. Configurer les notifications Slack dans .env si souhait√©"
    echo "  2. Personnaliser les dashboards Grafana selon vos besoins"  
    echo "  3. Configurer les tunnels Cloudflare pour l'acc√®s externe"
    echo "  4. Mettre en place la sauvegarde automatique des donn√©es"
fi

echo ""
echo "üìö Documentation compl√®te disponible dans README.md"