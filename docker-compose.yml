version: '3.8'

services:
  # üìä Prometheus - M√©triques et monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: deployment-monitoring-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./config/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    environment:
      - TZ=Europe/Paris
    networks:
      - monitoring-network
    restart: unless-stopped
    labels:
      - "tunnel.enable=true"
      - "tunnel.hostname=prometheus.silverhawk77.click"
      - "tunnel.port=9090"
      - "tunnel.path=/"

  # üìà Grafana - Dashboard et visualisation
  grafana:
    image: grafana/grafana:latest
    container_name: deployment-monitoring-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=monitoring2024!
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=grafana.silverhawk77.click
      - GF_SERVER_ROOT_URL=https://grafana.silverhawk77.click
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - TZ=Europe/Paris
    networks:
      - monitoring-network
    restart: unless-stopped
    depends_on:
      - prometheus
    labels:
      - "tunnel.enable=true"
      - "tunnel.hostname=grafana.silverhawk77.click"
      - "tunnel.port=3000"
      - "tunnel.path=/"

  # üîç Node Exporter - M√©triques syst√®me du serveur
  node-exporter:
    image: prom/node-exporter:latest
    container_name: deployment-monitoring-node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring-network
    restart: unless-stopped

  # üê≥ cAdvisor - M√©triques containers Docker
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: deployment-monitoring-cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    networks:
      - monitoring-network
    restart: unless-stopped
    privileged: true

  # üìä MongoDB Exporter - M√©triques MongoDB pour Tunnel Manager
  mongodb-exporter:
    image: percona/mongodb_exporter:latest
    container_name: deployment-monitoring-mongodb-exporter
    ports:
      - "9216:9216"
    environment:
      - MONGODB_URI=mongodb://host.docker.internal:27017
    networks:
      - monitoring-network
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # üîî Alertmanager - Gestion des alertes
  alertmanager:
    image: prom/alertmanager:latest
    container_name: deployment-monitoring-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./config/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    networks:
      - monitoring-network
    restart: unless-stopped
    labels:
      - "tunnel.enable=true"
      - "tunnel.hostname=alerts.silverhawk77.click"
      - "tunnel.port=9093"
      - "tunnel.path=/"

  # üìù Loki - Logs aggregation
  loki:
    image: grafana/loki:latest
    container_name: deployment-monitoring-loki
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring-network
    restart: unless-stopped

  # üöõ Promtail - Log shipper pour Loki
  promtail:
    image: grafana/promtail:latest
    container_name: deployment-monitoring-promtail
    volumes:
      - ./config/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoring-network
    restart: unless-stopped

  # üìä Deployment Metrics Exporter - M√©triques sp√©cialis√©es starter-frontend
  deployment-metrics-exporter:
    build:
      context: .
      dockerfile: Dockerfile.metrics-exporter
    container_name: deployment-monitoring-metrics-exporter
    ports:
      - "9091:9091"
    environment:
      - METRICS_EXPORTER_PORT=9091
      - DEPLOYMENT_API_URL=http://host.docker.internal:3004
      - PORT_MANAGER_URL=http://host.docker.internal:3005
      - SERVER_IP=51.159.99.160
    networks:
      - monitoring-network
    restart: unless-stopped
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - prometheus
    labels:
      - "tunnel.enable=true"
      - "tunnel.hostname=metrics.silverhawk77.click"
      - "tunnel.port=9091"
      - "tunnel.path=/"

# üíæ Volumes persistants
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  loki_data:
    driver: local

# üåê R√©seau de monitoring
networks:
  monitoring-network:
    driver: bridge
    name: monitoring-network